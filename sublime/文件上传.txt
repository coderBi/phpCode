$_FILES: 该超全局变量，存储了每个上传的临时文件的信息，包括临时文件地址
$_FILES属性：
	1，每一个key是上传表单中的name作为标志
	2，每一个key对应一个array（5）{name：原始文件的名称
									type：类型，例如 image/jpeg（称为mime类型）
									tmp_name：上传后文件的临时地址
									error = 0：是否有错误，及错误代码,为出错是0
									size：大小，单位是bytes
										}
文件上传：浏览器将文件发送到服务器，服务器负责再对这个文件进行相关的操作
note：如果要进行文件上传，必须指定enctype='multipart/form-data',所以只能用post提交完成

上传文件命名：
	1，唯一性，不同用户可能会上传相同文件名称
	2，不存在特殊的字符，不同操作系统可能对命名接受的字符不同
	3，逻辑性，文件名称应该有一定意义
获取文件的真实类型：由于存在后缀名跟文件的实际类型可能不一样，所以需要从文件里面读取mime类型
	1，首先要开启fileinfo扩展
	2，语法： new Finfo(FILEINFO_MIME_TYPE)->file($file_info['tmp_name'])
文件上传子目录划分：
	1，按照业务路基划分
	2，在上传的目录中，按照某种规则（年，月，日...）将文件存到不同的子目录
	3，实际项目中，一般指定$upload_path = 'image/goods'来划分业务逻辑，然后在每一个业务逻辑子目录下面通过时间规则划分子目录，也就是最终效果是image/user/20160101/xxxx.jpg
上传错误：error = 0
	1，0  没有错误
	2，1：超过了php.ini中间的上传文件大小限制  
	3，2：超过了MAX_FILE_SIZE,例如 <input type='hidden' name='MAX_FIEL_SIZE' value='100000'>。这样每一个表单可以灵活的控制自己的最大上传文件大小
	4，3：文件被部分上传
	5，4：未选择文件
	6，5：比较特殊，是约定用户设置的而不是php规定的。一般如果文件长度是0用户可以将错误设置为5
	7，6：上传临时目录（temp）未找到，一般是由于用户没有系统目录的读权限
	8，7：上传临时目录（temp）写入失败，一般是由于用户没有系统目录的写权限或者磁盘容量不够
	**note：文件也是post数据的一部分，而php里面对post的最大数据也有限制，如果文件的大小超过了post数据的大小限制，会导致post中的所有数据都不能处理，也就是说$_POST $_FILE都会是空数组
上传相关函数：
	uniqid(【前缀】,【是否增加唯一性,默认是false。设置为true是为了防止处理器在同一周期内产生两个相同的值】): 这个函数的产生唯一性的原理是利用时间的唯一性
	strrchr(str，substr)：返回最后出现子串位置及以后的字符串。可以用来获取文件后缀名称
	move_uploaded_file: 将文件从上传的默认目录（php.ini如果没有设置就是windows/temp）移动到新的目录。文件上传到临时目录，其生存期为脚本周期，move_uploaded_file同时实现了文件的持久存储
	is_uploaded_file(): 文件是否是【http】上传的文件，因为临时目录中的文件可能会被其他同名文件覆盖。一般上线后上传目录应该是独特的，并且这个目录应该设置只有 php可以操作这个目录
	Date(): 格式化本地时间，用于生成需要的子目录名
	is_dir（）：判断目录是否存在
	Mkdir（）：创建dir
多文件上传：
	如果每一个文件有一个不同的名字：php中可以单独处理每一个文件$_FILES['name1']
	如果每一个文件命名为 arr[] 形式：每一个$_FILE的数据项都对应一个数组: $_FILES{'name'=>array([0]=>'xx', [1]=>'xxx')}
	**note: 如果其中有命名为 arr['key']的：$_FILES{'name'=>array(['key']=>'xx'}
目录操作相关函数：
	is_dir():判断是不是一个目录
	mkdir(目录地址，目录权限，是否递归创建):创建，在windows系统里面第二参数目录权限的设置会被自动忽略，linux里可以设置为0711之类的。如果第三个参数设置为递归创建（默认是非递归创建），会自动创建可能不存在的父目录
	rmdir(待删除的目录地址)：删除。如果目录非空不能删除，如果有内容需要递归删除。要注意的是windows的回收站只是供给windows资源管理使用的，而用户自己调用函数移出磁盘文件是不会出现在回收站的。实际开发可以自己添加数据还原功能
	rename(原始地址，目标地址)：可以用来移动跟更改名称。在php5.3之后rename可以跨磁盘进行文件的移动，但是没有办法跨区进行目录移动
	copy(src，des)：拷贝文件
	opendir(目录地址)：返回目录句柄（文件标识）
	readdir（文件句柄）：返回文件名称，一次只能读取一个文件名称，直到读不到文件
	closedir（文件句柄）：关闭句柄，断开php与文件系统的数据通道。例如$handle=opendir($path); while(false ！==($filename= readdir($handle))){ if($filename == '.' || $filename=='..') continue;} closedir($handle); 上面之所以false ！== 因为文件的名称可能是 ‘0’

/////////////////////////////////////////////////
MIME: 多用途Internet邮件扩展，一开始用于邮件服务
/////////////////////////////////////////////////

/////////////////////////////////////////////////
php.ini里面默认：
	upload_max_filesize：2M
	post_max_size：8M
/////////////////////////////////////////////////

